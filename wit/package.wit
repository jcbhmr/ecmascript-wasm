package jcbhmr:wajsi@0.1.0;

interface types {
  variant value {
    undefined,
    null,
    boolean(bool),
    number(f64),
    %string(string),
    object(object),
    symbol(symbol),
    bigint(bigint),
  }
  value-to-number: func(self: value) -> result<f64, value>;
  value-to-string: func(self: value) -> result<string, value>;
  value-to-boolean: func(self: value) -> result<bool, value>;
  value-to-object: func(self: value) -> result<object, value>;
  value-instance-of: func(self: value, c: borrow<object>) -> result<bool, value>;
  value-loosely-equals: func(self: value, o: value) -> result<bool, value>;
  value-strictly-equals: func(self: value, o: value) -> bool;

  variant property-key {
    %string(string),
    symbol(symbol),
  }

  resource object {
    clone: func() -> object;
    get: func(k: property-key) -> result<value, value>;
    set: func(k: property-key, v: value) -> result<bool, value>;
    has: func(k: property-key) -> result<bool, value>;
    delete: func(k: property-key) -> result<bool, value>;
  }

  resource callable {
    clone: func() -> callable;
    downcast: static func(o: borrow<object>) -> option<callable>;
    upcast: func() -> object;
    call: func(this: value, args: list<value>) -> result<value, value>;
    construct: func(args: list<value>) -> result<value, value>;
  }

  resource symbol {
    clone: func() -> symbol;
  }

  resource bigint {
    clone: func() -> bigint;
  }

  %import: func(s: string, o: option<value>) -> result<object, value>;
  get-import-meta: func() -> option<object>;
  get-global-object: func() -> object;
}

world imports {
  import types;
}
