// Code generated by wit-bindgen-go. DO NOT EDIT.

package types

import (
	"go.bytecodealliance.org/cm"
	"unsafe"
)

// ValueShape is used for storage in variant or result types.
type ValueShape struct {
	_     cm.HostLayout
	shape [unsafe.Sizeof(Value{})]byte
}

func lower_PropertyKey(v PropertyKey) (f0 uint32, f1 uint32, f2 uint32) {
	f0 = (uint32)(v.Tag())
	switch f0 {
	case 0: // string
		v1, v2 := cm.LowerString(*cm.Case[string](&v, 0))
		f1 = (uint32)(cm.PointerToU32(v1))
		f2 = (uint32)(v2)
	case 1: // symbol
		v1 := cm.Reinterpret[uint32](*cm.Case[Symbol](&v, 1))
		f1 = (uint32)(v1)
	}
	return
}

func lower_Value(v Value) (f0 uint32, f1 uint64, f2 uint32) {
	f0 = (uint32)(v.Tag())
	switch f0 {
	case 2: // boolean
		v1 := (uint32)(cm.BoolToU32(*cm.Case[bool](&v, 2)))
		f1 = (uint64)(v1)
	case 3: // number
		v1 := (float64)(*cm.Case[float64](&v, 3))
		f1 = (uint64)(cm.F64ToU64(v1))
	case 4: // string
		v1, v2 := cm.LowerString(*cm.Case[string](&v, 4))
		f1 = (uint64)(cm.PointerToU64(v1))
		f2 = (uint32)(v2)
	case 5: // object
		v1 := cm.Reinterpret[uint32](*cm.Case[Object](&v, 5))
		f1 = (uint64)(v1)
	case 6: // symbol
		v1 := cm.Reinterpret[uint32](*cm.Case[Symbol](&v, 6))
		f1 = (uint64)(v1)
	case 7: // bigint
		v1 := cm.Reinterpret[uint32](*cm.Case[Bigint](&v, 7))
		f1 = (uint64)(v1)
	}
	return
}

func lower_OptionValue(v cm.Option[Value]) (f0 uint32, f1 uint32, f2 uint64, f3 uint32) {
	some := v.Some()
	if some != nil {
		f0 = 1
		v1, v2, v3 := lower_Value(*some)
		f1 = (uint32)(v1)
		f2 = (uint64)(v2)
		f3 = (uint32)(v3)
	}
	return
}
