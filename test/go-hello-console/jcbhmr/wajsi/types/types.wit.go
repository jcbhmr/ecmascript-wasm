// Code generated by wit-bindgen-go. DO NOT EDIT.

// Package types represents the imported interface "jcbhmr:wajsi/types@0.1.0".
package types

import (
	"go.bytecodealliance.org/cm"
)

// Object represents the imported resource "jcbhmr:wajsi/types@0.1.0#object".
//
//	resource object
type Object cm.Resource

// ResourceDrop represents the imported resource-drop for resource "object".
//
// Drops a resource handle.
//
//go:nosplit
func (self Object) ResourceDrop() {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_ObjectResourceDrop((uint32)(self0))
	return
}

// Clone represents the imported method "clone".
//
//	clone: func() -> object
//
//go:nosplit
func (self Object) Clone() (result Object) {
	self0 := cm.Reinterpret[uint32](self)
	result0 := wasmimport_ObjectClone((uint32)(self0))
	result = cm.Reinterpret[Object]((uint32)(result0))
	return
}

// Delete represents the imported method "delete".
//
//	delete: func(k: property-key) -> result<bool, value>
//
//go:nosplit
func (self Object) Delete(k PropertyKey) (result cm.Result[ValueShape, bool, Value]) {
	self0 := cm.Reinterpret[uint32](self)
	k0, k1, k2 := lower_PropertyKey(k)
	wasmimport_ObjectDelete((uint32)(self0), (uint32)(k0), (uint32)(k1), (uint32)(k2), &result)
	return
}

// Get represents the imported method "get".
//
//	get: func(k: property-key) -> result<value, value>
//
//go:nosplit
func (self Object) Get(k PropertyKey) (result cm.Result[Value, Value, Value]) {
	self0 := cm.Reinterpret[uint32](self)
	k0, k1, k2 := lower_PropertyKey(k)
	wasmimport_ObjectGet((uint32)(self0), (uint32)(k0), (uint32)(k1), (uint32)(k2), &result)
	return
}

// Has represents the imported method "has".
//
//	has: func(k: property-key) -> result<bool, value>
//
//go:nosplit
func (self Object) Has(k PropertyKey) (result cm.Result[ValueShape, bool, Value]) {
	self0 := cm.Reinterpret[uint32](self)
	k0, k1, k2 := lower_PropertyKey(k)
	wasmimport_ObjectHas((uint32)(self0), (uint32)(k0), (uint32)(k1), (uint32)(k2), &result)
	return
}

// Set represents the imported method "set".
//
//	set: func(k: property-key, v: value) -> result<bool, value>
//
//go:nosplit
func (self Object) Set(k PropertyKey, v Value) (result cm.Result[ValueShape, bool, Value]) {
	self0 := cm.Reinterpret[uint32](self)
	k0, k1, k2 := lower_PropertyKey(k)
	v0, v1, v2 := lower_Value(v)
	wasmimport_ObjectSet((uint32)(self0), (uint32)(k0), (uint32)(k1), (uint32)(k2), (uint32)(v0), (uint64)(v1), (uint32)(v2), &result)
	return
}

// Callable represents the imported resource "jcbhmr:wajsi/types@0.1.0#callable".
//
//	resource callable
type Callable cm.Resource

// ResourceDrop represents the imported resource-drop for resource "callable".
//
// Drops a resource handle.
//
//go:nosplit
func (self Callable) ResourceDrop() {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_CallableResourceDrop((uint32)(self0))
	return
}

// CallableDowncast represents the imported static function "downcast".
//
//	downcast: static func(o: borrow<object>) -> option<callable>
//
//go:nosplit
func CallableDowncast(o Object) (result cm.Option[Callable]) {
	o0 := cm.Reinterpret[uint32](o)
	wasmimport_CallableDowncast((uint32)(o0), &result)
	return
}

// Call represents the imported method "call".
//
//	call: func(this: value, args: list<value>) -> result<value, value>
//
//go:nosplit
func (self Callable) Call(this Value, args cm.List[Value]) (result cm.Result[Value, Value, Value]) {
	self0 := cm.Reinterpret[uint32](self)
	this0, this1, this2 := lower_Value(this)
	args0, args1 := cm.LowerList(args)
	wasmimport_CallableCall((uint32)(self0), (uint32)(this0), (uint64)(this1), (uint32)(this2), (*Value)(args0), (uint32)(args1), &result)
	return
}

// Clone represents the imported method "clone".
//
//	clone: func() -> callable
//
//go:nosplit
func (self Callable) Clone() (result Callable) {
	self0 := cm.Reinterpret[uint32](self)
	result0 := wasmimport_CallableClone((uint32)(self0))
	result = cm.Reinterpret[Callable]((uint32)(result0))
	return
}

// Construct represents the imported method "construct".
//
//	construct: func(args: list<value>) -> result<value, value>
//
//go:nosplit
func (self Callable) Construct(args cm.List[Value]) (result cm.Result[Value, Value, Value]) {
	self0 := cm.Reinterpret[uint32](self)
	args0, args1 := cm.LowerList(args)
	wasmimport_CallableConstruct((uint32)(self0), (*Value)(args0), (uint32)(args1), &result)
	return
}

// Upcast represents the imported method "upcast".
//
//	upcast: func() -> object
//
//go:nosplit
func (self Callable) Upcast() (result Object) {
	self0 := cm.Reinterpret[uint32](self)
	result0 := wasmimport_CallableUpcast((uint32)(self0))
	result = cm.Reinterpret[Object]((uint32)(result0))
	return
}

// Symbol represents the imported resource "jcbhmr:wajsi/types@0.1.0#symbol".
//
//	resource symbol
type Symbol cm.Resource

// ResourceDrop represents the imported resource-drop for resource "symbol".
//
// Drops a resource handle.
//
//go:nosplit
func (self Symbol) ResourceDrop() {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_SymbolResourceDrop((uint32)(self0))
	return
}

// Clone represents the imported method "clone".
//
//	clone: func() -> symbol
//
//go:nosplit
func (self Symbol) Clone() (result Symbol) {
	self0 := cm.Reinterpret[uint32](self)
	result0 := wasmimport_SymbolClone((uint32)(self0))
	result = cm.Reinterpret[Symbol]((uint32)(result0))
	return
}

// PropertyKey represents the imported variant "jcbhmr:wajsi/types@0.1.0#property-key".
//
//	variant property-key {
//		%string(string),
//		symbol(symbol),
//	}
type PropertyKey cm.Variant[uint8, string, string]

// PropertyKeyString_ returns a [PropertyKey] of case "string".
func PropertyKeyString_(data string) PropertyKey {
	return cm.New[PropertyKey](0, data)
}

// String_ returns a non-nil *[string] if [PropertyKey] represents the variant case "string".
func (self *PropertyKey) String_() *string {
	return cm.Case[string](self, 0)
}

// PropertyKeySymbol returns a [PropertyKey] of case "symbol".
func PropertyKeySymbol(data Symbol) PropertyKey {
	return cm.New[PropertyKey](1, data)
}

// Symbol returns a non-nil *[Symbol] if [PropertyKey] represents the variant case "symbol".
func (self *PropertyKey) Symbol() *Symbol {
	return cm.Case[Symbol](self, 1)
}

var _PropertyKeyStrings = [2]string{
	"string",
	"symbol",
}

// String implements [fmt.Stringer], returning the variant case name of v.
func (v PropertyKey) String() string {
	return _PropertyKeyStrings[v.Tag()]
}

// Bigint represents the imported resource "jcbhmr:wajsi/types@0.1.0#bigint".
//
//	resource bigint
type Bigint cm.Resource

// ResourceDrop represents the imported resource-drop for resource "bigint".
//
// Drops a resource handle.
//
//go:nosplit
func (self Bigint) ResourceDrop() {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_BigintResourceDrop((uint32)(self0))
	return
}

// Clone represents the imported method "clone".
//
//	clone: func() -> bigint
//
//go:nosplit
func (self Bigint) Clone() (result Bigint) {
	self0 := cm.Reinterpret[uint32](self)
	result0 := wasmimport_BigintClone((uint32)(self0))
	result = cm.Reinterpret[Bigint]((uint32)(result0))
	return
}

// Value represents the imported variant "jcbhmr:wajsi/types@0.1.0#value".
//
//	variant value {
//		undefined,
//		null,
//		boolean(bool),
//		number(f64),
//		%string(string),
//		object(object),
//		symbol(symbol),
//		bigint(bigint),
//	}
type Value cm.Variant[uint8, string, float64]

// ValueUndefined returns a [Value] of case "undefined".
func ValueUndefined() Value {
	var data struct{}
	return cm.New[Value](0, data)
}

// Undefined returns true if [Value] represents the variant case "undefined".
func (self *Value) Undefined() bool {
	return self.Tag() == 0
}

// ValueNull returns a [Value] of case "null".
func ValueNull() Value {
	var data struct{}
	return cm.New[Value](1, data)
}

// Null returns true if [Value] represents the variant case "null".
func (self *Value) Null() bool {
	return self.Tag() == 1
}

// ValueBoolean returns a [Value] of case "boolean".
func ValueBoolean(data bool) Value {
	return cm.New[Value](2, data)
}

// Boolean returns a non-nil *[bool] if [Value] represents the variant case "boolean".
func (self *Value) Boolean() *bool {
	return cm.Case[bool](self, 2)
}

// ValueNumber returns a [Value] of case "number".
func ValueNumber(data float64) Value {
	return cm.New[Value](3, data)
}

// Number returns a non-nil *[float64] if [Value] represents the variant case "number".
func (self *Value) Number() *float64 {
	return cm.Case[float64](self, 3)
}

// ValueString_ returns a [Value] of case "string".
func ValueString_(data string) Value {
	return cm.New[Value](4, data)
}

// String_ returns a non-nil *[string] if [Value] represents the variant case "string".
func (self *Value) String_() *string {
	return cm.Case[string](self, 4)
}

// ValueObject returns a [Value] of case "object".
func ValueObject(data Object) Value {
	return cm.New[Value](5, data)
}

// Object returns a non-nil *[Object] if [Value] represents the variant case "object".
func (self *Value) Object() *Object {
	return cm.Case[Object](self, 5)
}

// ValueSymbol returns a [Value] of case "symbol".
func ValueSymbol(data Symbol) Value {
	return cm.New[Value](6, data)
}

// Symbol returns a non-nil *[Symbol] if [Value] represents the variant case "symbol".
func (self *Value) Symbol() *Symbol {
	return cm.Case[Symbol](self, 6)
}

// ValueBigint returns a [Value] of case "bigint".
func ValueBigint(data Bigint) Value {
	return cm.New[Value](7, data)
}

// Bigint returns a non-nil *[Bigint] if [Value] represents the variant case "bigint".
func (self *Value) Bigint() *Bigint {
	return cm.Case[Bigint](self, 7)
}

var _ValueStrings = [8]string{
	"undefined",
	"null",
	"boolean",
	"number",
	"string",
	"object",
	"symbol",
	"bigint",
}

// String implements [fmt.Stringer], returning the variant case name of v.
func (v Value) String() string {
	return _ValueStrings[v.Tag()]
}

// ValueToNumber represents the imported function "value-to-number".
//
//	value-to-number: func() -> result<f64, value>
//
//go:nosplit
func ValueToNumber(self Value) (result cm.Result[ValueShape, float64, Value]) {
	self0, self1, self2 := lower_Value(self)
	wasmimport_ValueToNumber((uint32)(self0), (uint64)(self1), (uint32)(self2), &result)
	return
}

// ValueToString represents the imported function "value-to-string".
//
//	value-to-string: func() -> result<string, value>
//
//go:nosplit
func ValueToString(self Value) (result cm.Result[ValueShape, string, Value]) {
	self0, self1, self2 := lower_Value(self)
	wasmimport_ValueToString((uint32)(self0), (uint64)(self1), (uint32)(self2), &result)
	return
}

// ValueToBoolean represents the imported function "value-to-boolean".
//
//	value-to-boolean: func() -> result<bool, value>
//
//go:nosplit
func ValueToBoolean(self Value) (result cm.Result[ValueShape, bool, Value]) {
	self0, self1, self2 := lower_Value(self)
	wasmimport_ValueToBoolean((uint32)(self0), (uint64)(self1), (uint32)(self2), &result)
	return
}

// ValueToObject represents the imported function "value-to-object".
//
//	value-to-object: func() -> result<object, value>
//
//go:nosplit
func ValueToObject(self Value) (result cm.Result[ValueShape, Object, Value]) {
	self0, self1, self2 := lower_Value(self)
	wasmimport_ValueToObject((uint32)(self0), (uint64)(self1), (uint32)(self2), &result)
	return
}

// ValueInstanceOf represents the imported function "value-instance-of".
//
//	value-instance-of: func(c: borrow<object>) -> result<bool, value>
//
//go:nosplit
func ValueInstanceOf(self Value, c Object) (result cm.Result[ValueShape, bool, Value]) {
	self0, self1, self2 := lower_Value(self)
	c0 := cm.Reinterpret[uint32](c)
	wasmimport_ValueInstanceOf((uint32)(self0), (uint64)(self1), (uint32)(self2), (uint32)(c0), &result)
	return
}

// ValueLooselyEquals represents the imported function "value-loosely-equals".
//
//	value-loosely-equals: func(o: value) -> result<bool, value>
//
//go:nosplit
func ValueLooselyEquals(self Value, o Value) (result cm.Result[ValueShape, bool, Value]) {
	self0, self1, self2 := lower_Value(self)
	o0, o1, o2 := lower_Value(o)
	wasmimport_ValueLooselyEquals((uint32)(self0), (uint64)(self1), (uint32)(self2), (uint32)(o0), (uint64)(o1), (uint32)(o2), &result)
	return
}

// ValueStrictlyEquals represents the imported function "value-strictly-equals".
//
//	value-strictly-equals: func(o: value) -> bool
//
//go:nosplit
func ValueStrictlyEquals(self Value, o Value) (result bool) {
	self0, self1, self2 := lower_Value(self)
	o0, o1, o2 := lower_Value(o)
	result0 := wasmimport_ValueStrictlyEquals((uint32)(self0), (uint64)(self1), (uint32)(self2), (uint32)(o0), (uint64)(o1), (uint32)(o2))
	result = (bool)(cm.U32ToBool((uint32)(result0)))
	return
}

// Import represents the imported function "import".
//
//	%import: func(s: string, o: option<value>) -> result<object, value>
//
//go:nosplit
func Import(s string, o cm.Option[Value]) (result cm.Result[ValueShape, Object, Value]) {
	s0, s1 := cm.LowerString(s)
	o0, o1, o2, o3 := lower_OptionValue(o)
	wasmimport_Import((*uint8)(s0), (uint32)(s1), (uint32)(o0), (uint32)(o1), (uint64)(o2), (uint32)(o3), &result)
	return
}

// GetImportMeta represents the imported function "get-import-meta".
//
//	get-import-meta: func() -> option<object>
//
//go:nosplit
func GetImportMeta() (result cm.Option[Object]) {
	wasmimport_GetImportMeta(&result)
	return
}

// GetGlobalObject represents the imported function "get-global-object".
//
//	get-global-object: func() -> object
//
//go:nosplit
func GetGlobalObject() (result Object) {
	result0 := wasmimport_GetGlobalObject()
	result = cm.Reinterpret[Object]((uint32)(result0))
	return
}
